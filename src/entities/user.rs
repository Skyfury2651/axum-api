//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use sea_orm::EntityTrait;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    #[sea_orm(unique)]
    pub user_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
    pub is_active: i8,
}

#[derive(DeriveIntoActiveModel)]
pub struct NewUser {
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub password: String,
    pub email: String,
    pub user_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
